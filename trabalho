#include <iostream>
#include <conio.h>  
#include <string>
#include <iomanip>

using namespace std;

// Declaração de funções
void incluirMedico();
void incluirPaciente();
void exclusaoPacientes();
void excluirMedico();
void agendarConsulta();
void exibirmenu();
void inclusao_Medico();
void inclusao_Paciente();
void buscaaleat_especialidade();
void leitura_indiceesp();
bool busca_codmedico();
void busca_cidade();
void mostrarMedicos();
void mostrarPaciente();
void mostrarMedicos();

// Declaração de structs
struct cidade {
    int codigo_cidade;
    string nome; 
    string uf;
};
struct indice_cidade {
    int codigo;
    int ender;
};
struct especialidade {
    int codigo_especialidade;
    string descricao;
};
struct indice_especialidade {
    int codigo;
    int ender;
};
struct medico {
    int cod_medico;
    string nome;
    int codigo_especialidade;
    string endereco;
    string numero;
    int codigo_cidade;
};
struct indice_medicos {
    int codigo;
    int ender;
};
struct paciente {
    int cod_paciente;
    string nome;
    string endereco;
    int codigo_cidade;
};
struct indice_paciente {
    int codigo;
    int ender;
};
struct cid { 
    int codigo_cid;
    string descricao;
};
struct indice_CID {
    int codigo;
    int ender;
};
struct medicamento {
    int codigo_medicamento;
    string descricao;
    int quant_estoque;
    int estoque_min;
    int estoque_max;
    float preco_unitario;
};
struct indice_medicamento {
    int codigo;
    int ender;
};
struct consulta {
    int codigo_consulta; 
    int codigo_paciente;
    int codigo_medico;
    string data;
    string horario;
    int codigo_cid; 
    int codigo_medicamento;
    int quantidade_medicamento; 
};
struct indice_consulta {
    int codigo;
    int ender;
};

// Leitura de dados
void lerDadosCidades(struct cidade city[], int &cont) {
    int i = 0;
    for (int saida = 1; i < 2 && saida != 0; i++) {
        cout << "\n\nCodigo da Cidade " << (i + 1) << ": ";
        cin >> city[i].codigo_cidade;
        if (city[i].codigo_cidade > 0) {
            cout << "Nome: ";
            cin >> city[i].nome;
            cout << "UF: ";
            cin >> city[i].uf;
        } else {
            saida = 0;
        }
    }
    cont = i;
}
void leitura_indicecidades (struct indice_cidade idxcity[], int cont){
    for (int i = 0; i < cont; i++){
        cout << "\n\nCodigo do Indice " << (i+1) << ": ";
        cin >> idxcity[i].codigo;
        cout << "Endereco Fisico na Area de Dados: ";
        cin >> idxcity[i].ender;
    }
}
void lerDadosEspecialidades(struct especialidade esp[], int &cont) {
    int i = 0;
    for (int saida = 1; i < 2 && saida != 0; i++) {
        cout << "\n\nCodigo da Especialidade " << (i + 1) << ": ";
        cin >> esp[i].codigo_especialidade;
        if (esp[i].codigo_especialidade > 0) {
            cout << "Descricao: ";
            cin >> esp[i].descricao;
        } else {
            saida = 0;
        }
    }
    cont = i;
}
void leitura_indiceesp (struct indice_especialidade idxesp[], int cont){
    for (int i = 0; i < cont; i++){
        cout << "\n\nCodigo do Indice " << (i+1) << ": ";
        cin >> idxesp[i].codigo;
        cout << "Endereco Fisico na Area de Dados: ";
        cin >> idxesp[i].ender;
    }
}
void lerDadosCID(struct cid cid[], int &cont) {
    int i = 0;
    for (int saida = 1; i < 2 && saida != 0; i++) {
        cout << "\n\nCodigo do CID " << (i + 1) << ": ";
        cin >> cid[i].codigo_cid;
        if (cid[i].codigo_cid > 0) {
            cout << "Descricao: ";
            cin >> cid[i].descricao;
        } else {
            saida = 0;
        }
    }
    cont = i;
}
void leitura_indicecid (struct indice_CID idxcid[], int cont){
    for (int i = 0; i < cont; i++){
        cout << "\n\nCodigo do Indice " << (i+1) << ": ";
        cin >> idxcid[i].codigo;
        cout << "Endereco Fisico na Area de Dados: ";
        cin >> idxcid[i].ender;
    }
}
void lerDadosMedicamentos(struct medicamento medicamen[], int &cont) {
    int i = 0;
    for (int saida = 1; i < 2 && saida != 0; i++) {
        cout << "\n\nCodigo do Medicamento " << (i + 1) << ": ";
        cin >> medicamen[i].codigo_medicamento;
        if (medicamen[i].codigo_medicamento > 0) {
            cout << "Descricao: ";
            cin >> medicamen[i].descricao;
            cout << "Quantidade em estoque: ";
            cin >> medicamen[i].quant_estoque; 
            cout << "Estoque Minimo: ";
            cin >> medicamen[i].estoque_min; 
            cout << "Estoque Maximo: ";
            cin >> medicamen[i].estoque_max;
            cout << "Preco Unitario: ";
            cin >> medicamen[i].preco_unitario; 
        } else {
            saida = 0;
        }
    }
    cont = i;
}
void lerDadosMedicos(struct medico med[], int &cont) {
    int i = 0;
    for (int saida = 1; i < 1 && saida != 0; i++) {
        cout << "\n\nCodigo do Medico " << (i + 1) << ": ";
        cin >> med[i].cod_medico;
        if (med[i].cod_medico > 0) {
            cout << "Nome: ";
            cin >> med[i].nome;
            cout << "Especialidade: ";
            cin >> med[i].codigo_especialidade;
            cout << "Endereco: ";
            cin >> med[i].endereco; 
            cout << "Numero: ";
            cin >> med[i].numero; 
            cout << "Codigo cidade: ";
            cin >> med[i].codigo_cidade;
        } else {
            saida = 0;
        }
    }
    cont = i;
}

//Buscas Binarias 
void busca_cidade (struct cidade city[], struct indice_cidade idxcity[], int &contador_cidade, int codcidade){
    int i = 0, f = contador_cidade -1 ;
    int m = (i + f) / 2;
    for (; f >= i && codcidade != idxcity[m].codigo; m = (i + f) / 2){
        if (codcidade > idxcity[m].codigo)
            i = m + 1;
        else
            f = m - 1;
    }
    if (codcidade == idxcity[m].codigo){
        i = idxcity[m].ender;
        
        cout <<"Nome da cidade e UF:  " << city[i].nome << endl << city[i].uf << endl ;
    	
    }
    else
        cout << "\n\n Cidade nao encontrada ";
    getch();
}
void busca_especialidade (struct especialidade esp[], struct indice_especialidade idxesp[], int &contador_esp, int codesp){
    int i = 0, f = contador_esp -1 ;
    int m = (i + f) / 2;
    for (; f >= i && codesp != idxesp[m].codigo; m = (i + f) / 2){
        if (codesp > idxesp[m].codigo)
            i = m + 1;
        else
            f = m - 1;
    }
    if (codesp == idxesp[m].codigo){
        i = idxesp[m].ender;
        
        cout <<"Nome da Especialidade: " << esp[i].descricao;
    	
    }
    else
        cout << "\n\n Especialidade não encontrada";
    getch();
}
bool busca_codmedico (struct medico med[], struct indice_medicos idx[], int &cont, int codmedico){
    int i = 0, f = cont -1 ;
    int m = (i + f) / 2;
    for (; f >= i && codmedico != idx[m].codigo; m = (i + f) / 2){
        if (codmedico > idx[m].codigo)
            i = m + 1;
        else
            f = m - 1;
    }
    if (codmedico == idx[m].codigo){
        i = idx[m].ender;
        
        cout <<"Medico ja cadastrado  "; 
        return true;
       
    	
    }
    else{
     cout <<"Medico nao cadastrado  " << endl;
        return false;
		}
    getch();
}
bool busca_codpaciente (struct paciente pac[], struct indice_paciente idxpac[], int &cont, int codpaciente){
    int i = 0, f = cont -1 ;
    int m = (i + f) / 2;
    for (; f >= i && codpaciente != idxpac[m].codigo; m = (i + f) / 2){
        if (codpaciente > idxpac[m].codigo)
            i = m + 1;
        else
            f = m - 1;
    }
    if (codpaciente == idxpac[m].codigo){
        i = idxpac[m].ender;
        
        cout <<"Paciente ja cadastrado  "; 
        return true;
       
    	
    }
    else{
     cout <<"Paciente nao cadastrado  " << endl;
        return false;
		}
    getch();
}

//Fim Das Buscas
//Mostrar 
void mostrarMedicos(struct medico med[], int cont){
	
    for (int i = 0; i < cont; i++) {
        cout << "\nCodigo: " << med[i].cod_medico << endl;
		cout << "Nome: " << med[i].nome << endl;
		cout << "Codigo da especialidade: " << med[i].codigo_especialidade << endl;
		cout << "Endereco: " << med[i].endereco << endl;
		cout << "Cidade: " << med[i].codigo_cidade << endl;
		cout << "Numero: " << med[i].numero << endl;
	}
	getch();
}
void mostrarPaciente(struct paciente pac[], int cont){
	
    for (int i = 0; i < cont; i++) {
        cout << "\nCodigo: " << pac[i].cod_paciente << endl;
		cout << "Nome: " << pac[i].nome << endl;
		cout << "Endereco: " << pac[i].endereco << endl;
		cout << "Cidade: " << pac[i].codigo_cidade << endl;
		
	}
	getch();
}
//Fim dos mostrar
// Inclusao de medicos
void inclusao_Medico(struct indice_medicos idx[], struct medico med[], int &cont, struct especialidade esp[], struct indice_especialidade idxesp[], int contador_esp, struct cidade city[], struct indice_cidade idxcity[], int contador_cidade) {
    if (cont >= 2) {  
        cout << "Limite de medicos alcancado.";
        return;
    }
    
    int codmedico;
    cout << "Digite o codigo a ser incluido: ";
    cin >> codmedico;

    // Verifica se o médico já está cadastrado
    if (busca_codmedico(med, idx, cont, codmedico)) {
        cout << "Medico ja cadastrado.\n";
        return ;
    }

    // Inclusão do novo registro na área de dados
    med[cont].cod_medico = codmedico;
    cout << "Nome: ";
    cin >> med[cont].nome;
    cout << "Endereco: ";
    cin >> med[cont].endereco;
    cout << "Codigo da cidade: ";
    cin >> med[cont].codigo_cidade;
    int codcidade = med[cont].codigo_cidade;
    busca_cidade(city, idxcity, contador_cidade, codcidade);
    cout << "Numero: ";
    cin >> med[cont].numero;
    cout << "Codigo da Especialidade: ";
    cin >> med[cont].codigo_especialidade;
    int codesp = med[cont].codigo_especialidade;

    if (contador_esp == 0) {
        cout << "Nenhuma especialidade cadastrada. Não é possível incluir o médico.";
        return;
    }
    
    busca_especialidade(esp, idxesp, contador_esp, codesp);

    // Inclusão na área de índices
    int i;
    for (i = cont - 1; i >= 0 && idx[i].codigo > med[cont].cod_medico; i--) {
        idx[i + 1].codigo = idx[i].codigo;
        idx[i + 1].ender = idx[i].ender;
    }
    idx[i + 1].codigo = med[cont].cod_medico;
    idx[i + 1].ender = cont;
    cont++;  // Atualiza o contador após a inclusão

    cout << "\n\nInclusão realizada com sucesso";
}


void inclusao_Paciente(struct indice_paciente idxpac[], struct paciente pac[], int &cont, struct cidade city[], struct indice_cidade idxcity[], int contador_cidade) {
    if (cont >= 2) {  
        cout << "Limite de Pacientes alcancado.";
        return;
    }
    
    int codpaciente;
    cout << "Digite o codigo a ser incluido: ";
    cin >> codpaciente;

  
    if (busca_codpaciente(pac, idxpac, cont, codpaciente)) {
        cout << "Paciente ja cadastrado.\n";
        return ;
    }

    // Inclusão do novo registro na área de dados
    pac[cont].cod_paciente = codpaciente;
    cout << "Nome: ";
    cin >> pac[cont].nome;
    cout << "Endereco: ";
    cin >> pac[cont].endereco;
    cout << "Codigo da cidade: ";
    cin >> pac[cont].codigo_cidade;
    int codcidade = pac[cont].codigo_cidade;
    busca_cidade(city, idxcity, contador_cidade, codcidade);

    // Inclusão na área de índices
    int i;
    for (i = cont - 1; i >= 0 && idxpac[i].codigo > pac[cont].cod_paciente; i--) {
        idxpac[i + 1].codigo = idxpac[i].codigo;
        idxpac[i + 1].ender = idxpac[i].ender;
    }
    idxpac[i + 1].codigo = pac[cont].cod_paciente;
    idxpac[i + 1].ender = cont;
    cont++;  // Atualiza o contador após a inclusão

    cout << "\n\nInclusao realizada com sucesso";
}

//Exclusao

void exclusaoPacientes (struct indice_paciente idxpac[], struct paciente pac[], int &cont){
	int codpaciente;
	cout <<"Digite o codigo do paciente a ser excluido: ";
	cin >> codpaciente;

	int i = 0, f = cont;
    int m = (i + f) / 2;
    for (; f >= i && codpaciente != idxpac[m].codigo; m = (i + f) / 2){
        if (codpaciente > idxpac[m].codigo)
            i = m + 1;
        else
            f = m - 1;
    }
    i = idxpac[m].ender;
    if ((codpaciente == idxpac[m].codigo) ){
        cout << "\n\n Paciente Excluido com Sucesso";
    }
    else
        cout << "Paciente nao cadastrado";
    getch();
}
// Função para o menu
char menu() {
    int op;
    cout << "\n+==============================================+";
    cout << "\n|            MENU DE OPÇÕES                   |";
    cout << "\n|==============================================|";
    cout << "\n|            0. Sair                           |";
    cout << "\n|            1. Leitura de Cidades             |";
    cout << "\n|            2. Leitura de Especialidade       |";
    cout << "\n|            3. Mostrar de Medicos             |";
    cout << "\n|            4. Inclusao de Medicos           |";
    cout << "\n|            5. Inclusao de Pacientes            |";
    cout << "\n|            6. Exclusao de Pacientes         |";
    cout << "\n|            7. Mostrar Pacientes       |";
    cout << "\n|            8. Consultar Turmas               |";
    cout << "\n|            9. Exibir Turmas Completas        |";
    cout << "\n|           10. Exibir Matriculas             |";
    cout << "\n+==============================================+";
    cout << "\nEscolha uma opcao: ";
    cin >> op;
    return op;
}

// Função principal
int main() {
    setlocale(LC_ALL, "Portuguese");
    struct cidade city[2];
    struct indice_cidade idxcity[2];
    struct especialidade esp[2];
    struct indice_especialidade idxesp[2];
    struct medico med[2]={
    	{1, "Joao", 14, "Avenida Sao Paulo", "18996472005", 2}
	};
    struct paciente pac[2]={
    	{1,"Taldo Junin", "Avenida", 1}
	};
	struct indice_paciente idxpac[2]={
		{1,0}
	};
    struct cid cid[2];
   // struct indice_CID[2];
    struct medicamento medicamen[2];
    struct indice_medicos idxmed[2]={
    	{1,0}
	};

    struct consulta con[2]; 
    int contador_cidade = 0, contador_esp = 0, contador_cid = 0, contador_medicamentos = 0, contador_medicos = 1, contador_paciente = 1;
    int cont_indiceesp = 0 ; 
    char opcao;

    do {
        opcao = menu();
        switch (opcao) {
            case 1:
                lerDadosCidades(city, contador_cidade);
                leitura_indicecidades(idxcity, contador_cidade);
                break;
            case 2:
                lerDadosEspecialidades(esp, contador_esp);
				 leitura_indiceesp(idxesp,contador_esp);
                break;
            case 3:
            	mostrarMedicos(med, contador_medicos);
                break;
            case 4:
                inclusao_Medico(idxmed, med, contador_medicos, esp, idxesp, contador_esp, city, idxcity, contador_cidade);
                break;
            case 5:
            	inclusao_Paciente(idxpac, pac, contador_paciente, city, idxcity, contador_cidade);
            	break;
            case 6:
            	exclusaoPacientes(idxpac, pac, contador_paciente);
            	break;
            case 7:
            	mostrarPaciente(pac, contador_paciente);
            	break;	
            case 0:
                cout << "Saindo...";
                break;
            default:
                cout << "Opção inválida.";
                break;
        }
        if (opcao != 0) {
            cout << "\nPressione qualquer tecla para continuar...";
            getch();
        }
    } while (opcao != 0);

    return 0;
}
